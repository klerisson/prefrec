/**
 * 
 */
package br.ufu.facom.lsi.prefrec.crossvalidation;


/**
 * @author Klerisson
 *
 *-- treinamento, p/ cada estrato de usuario i faça (geracao do modelo)
	select userid,itemid, rate
	from datatable
	where folduserid!=i;

	-- teste, para cada estrato de item j faça 
	select userid,itemid, rate
	from datatable
	where folduserid=i and folditemid!=j;

	select userid,itemid, rate from datatable where folduserid=i and folditemid=j; -- guardar itens a serem recomendados

	-- para cada usuario k faça (recomendacao)
	-- gere a matriz de preferencias e encontre o grupo mais semelhante (comparação entre as matrizes), faça a recomendação dos itens do estrato de itens j
	-- passar para o cprefminer  a matriz e lista de itens

	-- pegar resultado e validar, calculando precisao, recall e acurácia, gravar estatistticas, verificar com o guilherme  se o cpref já possui essa parte

 */
public class CrossValidation {
	
	private int partitions;

	public void execute(){
		
		for(int i = 0; i < partitions; i++){
			
			br.ufu.facom.lsi.prefrec.representation.Main.main(new String[]{Integer.toString(i)});
			
			/*
			 * args[0] cluster typ: "DBSCAN", "FUZZY", "AFFINITY"
			 * 	
			 * DBSCAN: args[1] distante type: "euclidean", "cosine"; args[2] stands for maximum radius of the neighborhood to be considered
			 *	; args[3] minimum number of points needed for a cluster
			 *	
  			 * FUSZZY: args[1]  the number of clusters to split the data into
  			 *    args[2] the fuzziness factor, must be > 1.0
  			 *    
  			 *    
			 */
			br.ufu.facom.lsi.prefrec.clusterer.Main.main(new String[]{"DBSCAN", "euclidean", "20", "4"});
			br.ufu.facom.lsi.prefrec.agregation.Main.main(null);
			br.ufu.facom.lsi.prefrec.mining.cprefminermulti.Main.main(null);
			
		}
		
	}
		
//	/**
//	 * Read the Stratified Matrices, by item and by user, inputs generated by
//	 * prefrec Stratification module
//	 */
//	public void readInput() throws Exception {
//
//		try (InputStream file = new FileInputStream(new File(
//				"../StratifiedMatrixByUser.prefrecstratificator"));
//				InputStream buffer = new BufferedInputStream(file);
//				ObjectInput input = new ObjectInputStream(buffer);) {
//
//			// deserialize the Map
//			this.sm = (StratifiedMatrix) input.readObject();
//
//		} catch (Exception e) {
//			throw e;
//		}
//
//	}

}
